# -*- coding: utf-8 -*-
"""TPO_Progra_01.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uM2T6HruGFYnDJw_ioPG6BMnFWI43z5e
"""

#Programa 1.0
#Librerias
from datetime import datetime, timedelta
import os
from pathlib import Path
import shutil

#Clases
class FechaMenorActual(Exception):
    pass
class noLlegamosAIntroducirEsaFuncion(Exception):
    pass
class anioIngresadoMenorAlAnioActual(Exception):
    pass
class fechaEntradaMayorFechasalida(Exception):
    pass

#Funciones
def anioBisiesto(anio):
    '''
    Contrato: verifica si el año es bisiesto.
    Pre: Argumentos
            año: integer
    Post: retorna un booleano en referencia a la verificación
    '''
    return anio % 4 == 0 and (anio % 100 != 0 or anio % 400 == 0)
def crear_habitacion_estado(anio):
    '''
    Contrato: crea una lista con letras "D" 
    en razón de los días del mes y los ingresa en una matriz.
    Pre: Argumentos
            año: integer
    Post: retorna una matriz con 12 elementos 
    en donde cada elemento contiene letras "D" en correspondencia del mes
    '''
    diasMes = [ 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
    if anioBisiesto(anio):
        diasMes = [ 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
    matriz = []
    for x in range(len(diasMes)):
        lista = []
        for i in range(diasMes[x]):
            lista.append("D")
        matriz.append(lista)
    return matriz

def crear_dir(dir):
    '''
    Contrato: crea un directorio.
    Pre: Argumentos
            dir: string
    Post:
    '''
    os.mkdir(dir)

def val_archivo(nombre):
    '''
    Contrato: comprueba si existe un archivo en una determinada ubicacion.
    Pre: Argumentos
            nombre: string
    Post: returna un booleano en referencia a la existencia de un archivo o no
    '''
    return Path(nombre).exists()

def añadir_habitacion():
    '''
    Contrato: comprueba si existe un archivo "habitaciones.txt", 
    sí existe un directorio con el nombre del año actual
    si el archivo "habitaciones.txt" esta vacío, 
    construye un string con la información de la habitación
    que luego se carga en "habitaciones.txt",
    si el numero de la habitacion existe debera mostra un mensaje de error,
    Pre:
    Post:
    '''
    tipo_habitaciones = {"D":{"M":"Doble Matrimonial","S":"Doble Superior","T":"Doble Twin"},"T":{"M":"Triple Matrimonial","T":"Triple Twin"}}
    nombre = "habitaciones.txt"
    if not val_archivo(nombre):
        try:
            h = open(nombre,"at")
            h.close()
        except OSError:
            print("Se produjo un error relacionado con el sistema operativo")
        except FileNotFoundError:
            print("El archivo solicitado no existe")
        except PermissionError:
            print("No cuenta con los permisos suficiente para manejar el archivo")
        except:
            print("Ocurrio un error inesperado porfavor contactar al desarrollador")  
   
    if not os.path.isdir(f"{ruta_actual}/{nombre_dir}"):
        crear_dir(nombre_dir)
    if os.stat(nombre).st_size == 0:
        while True:
            numero = input("Ingrese el numero de habitacion ")
            if numero.isdigit():
                break
        while True:
            print("[D] Doble","[T] Triple")
            tipo1 = input("Ingrese el tipo de habitacion [D o T] ")
            tipo1 = tipo1.upper()
            if tipo1 == "D":
                print("[M] Matrimonial","[S] Superior","[T] Twin")
                tipo2 = input("Elija el tipo de habitacion [M], [S] o [T] ")
                tipo2 = tipo2.upper()
                if tipo2 in "MST":
                    break
            if tipo1 == "T":
                print("[M] Matrimonial","[T] Twin")
                tipo2 = input("Elija el tipo de habitacion [M] o [T] ")
                tipo2 = tipo2.upper()
                if tipo2 in "MT":
                    break
        try:
            with open(nombre,"wt",encoding="UTF-8") as h:
                h.write(f"{numero},{tipo_habitaciones[tipo1][tipo2]}\n")
        except OSError:
            print("Se produjo un error relacionado con el sistema operativo")
        except FileNotFoundError:
            print("El archivo solicitado no existe")
        except PermissionError:
            print("No cuenta con los permisos suficiente para manejar el archivo")
        except:
            print("Ocurrio un error inesperado porfavor contactar al desarrollador")  
    else:
        try:
            with open(nombre,"rt",encoding="UTF-8") as h:
                l_num = []
                for linea in h:
                    l_num.append(linea.split(",")[0])
                print(l_num)
                while True:
                    numero = input("Ingrese el numero de habitacion ")
                    if numero.isdigit() and numero not in l_num:
                        break
                    elif numero.isdigit() and numero in l_num:
                        print(f"El numero {numero} ya existe")
                        decision = input("Ingrese [S] si desea salir o cualquier tecla para continuar ")
                        if decision.upper() == "S":
                            return
                    else:
                        decision = input("Ingrese [S] si desea salir o cualquier tecla para continuar ")
                        if decision.upper() == "S":
                            return
    
                while True:
                    print("[D] Doble","[T] Triple")
                    tipo1 = input("Ingrese el tipo de habitacion [D o T] ")
                    tipo1 = tipo1.upper()
                    if tipo1 == "D":
                        print("[M] Matrimonial","[S] Superior","[T] Twin")
                        tipo2 = input("Elija el tipo de habitacion [M], [S] o [T] ")
                        tipo2 = tipo2.upper()
                        if tipo2 in "MST":
                            break
                    if tipo1 == "T":
                        print("[M] Matrimonial","[T] Twin")
                        tipo2 = input("Elija el tipo de habitacion [M] o [T] ")
                        tipo2 = tipo2.upper()
                        if tipo2 in "MT":
                            break
        except OSError:
            print("Se produjo un error relacionado con el sistema operativo")
        except FileNotFoundError:
            print("El archivo solicitado no existe")
        except PermissionError:
            print("No cuenta con los permisos suficiente para manejar el archivo")
        except:
            print("Ocurrio un error inesperado porfavor contactar al desarrollador") 

        try:    
            with open(nombre,"at",encoding="UTF-8") as h:    
                h.write(f"{numero},{tipo_habitaciones[tipo1][tipo2]}\n")
        except OSError:
            print("Se produjo un error relacionado con el sistema operativo")
        except FileNotFoundError:
            print("El archivo solicitado no existe ")
        except PermissionError:
            print("No cuenta con los permisos suficiente para manejar el archivo ")
        except:
            print("Ocurrio un error inesperado porfavor contactar al desarrollador") 
        

def armar_todo():
    '''
    Contrato: crea los archivos "estado_habitaciones" 
    más el nombre de cada uno de los meses del año,
    el archivo contendra una combinacion del contenido del archivo "habitaciones.txt"
    y el resultado de la función crear_habitaciones_estado.
    Pre:
    Post:
    '''
    hab1 = crear_habitacion_estado(anio_actual)
    l_num = []
    l_tipo = []
    try:
        with open(f"{ruta_actual}/habitaciones.txt","rt",encoding="utf-8") as h:
            for linea in h:
                linea = linea.rstrip()
                l_num.append(linea.split(",")[0])
                l_tipo.append(linea.split(",")[1])
    except OSError:
        print("Se produjo un error relacionado con el sistema operativo")
    except FileNotFoundError:
        print("El archivo solicitado no existe ")
    except PermissionError:
        print("No cuenta con los permisos suficiente para manejar el archivo ")
    except:
        print("Ocurrio un error inesperado porfavor contactar al desarrollador")  
    if not os.listdir(f"{ruta_actual}/{nombre_dir}"):
        for x in range(len(l_num)):
            for i in range(len(hab1)):
                try:
                    with open(f"{ruta_actual}/{nombre_dir}/habitaciones_estado {mes[i]}.txt","at",encoding="utf-8") as hest:
                        hest.write(l_num[x]+","+"-".join(hab1[i])+","+l_tipo[x]+"\n")
                except OSError:
                    print("Se produjo un error relacionado con el sistema operativo")
                except FileNotFoundError:
                    print("El archivo solicitado no existe ")
                except PermissionError:
                    print("No cuenta con los permisos suficiente para manejar el archivo ")
                except:
                    print("Ocurrio un error inesperado porfavor contactar al desarrollador")  
    else:
        l_num_estado = []
        try:
            for i in range(len(hab1)):
                with open(f"{ruta_actual}/{nombre_dir}/habitaciones_estado {mes[i]}.txt","rt",encoding="utf-8") as est:
                    lista = est.readlines()
                    for x in range(len(lista)):
                        l_num_estado.append(lista[x].split(",")[0])
    
        except OSError:
            print("Se produjo un error relacionado con el sistema operativo")
        except FileNotFoundError:
            print("El archivo solicitado no existe ")
        except PermissionError:
            print("No cuenta con los permisos suficiente para manejar el archivo ")
        except:
            print("Ocurrio un error inesperado porfavor contactar al desarrollador")
        if l_num_estado[-1] != l_num[-1]:
            try:
                for i in range(len(hab1)):
                    with open(f"{ruta_actual}/{nombre_dir}/habitaciones_estado {mes[i]}.txt","at",encoding="utf-8") as hest:
                        hest.write(l_num[-1]+","+"-".join(hab1[i])+","+l_tipo[-1]+"\n")
            except OSError:
                print("Se produjo un error relacionado con el sistema operativo")
            except FileNotFoundError:
                print("El archivo solicitado no existe ")
            except PermissionError:
                print("No cuenta con los permisos suficiente para manejar el archivo ")
            except:
                print("Ocurrio un error inesperado porfavor contactar al desarrollador")  



def validar_nombre(nombre):
    '''
    Contrato: valida que la longitud de una cadena sea mayor a 2 
    y que solo contenga letras.
    Pre: Argumentos
            nombre: string
    Post: retorna un booleano en referencia a la validación
    '''
    if len(nombre)>2 and nombre.isalpha():
        return True
    return False

def validar_dni(dni):
    '''
    Contrato: valida que la longitud de una cadena sea igual a 8 
    y que solo contenga números.
    Pre: Argumentos
            dni: string
    Post: retorna un booleano en referencia a la validación
    '''
    if len(dni) == 8 and dni.isdigit():
        return True
    return False

def validar_mail(mail):
    '''
    Contrato: valida que la cadena provista contenga 
    un formato caracteristico de un correo electronico.
    Pre: Argumentos
            mail: string
    Post: retorna un boleano en referencia a la validacion
    '''
    no_permitidos = '~!#$%^&*(){}[]+=:;"/\\|<>,?¿¡*`'
    dominios_permitidos = [".com.ar",".com",".ar"]
    if "@" in mail and mail.count("@") == 1:
        lista = mail.split("@")
        if not lista[0]:
            return False
        lista2 = lista[1].split(".")
        for x in range(len(lista)):
            for i in lista[x]:
                if i in no_permitidos:
                    return False
        if not lista2[0].isalpha():
            return False
        if len(lista2)>=2 and len(lista2)<=3 and len(lista2[-1])<4 and all(lista2):
                return True
    return False

def validar_num_telefono(numero):
    '''
    Contrato: valida que la cadena provista tenga un largo de 10 caracteres.
    Pre: Argumentos
            numero: string
    Post: retorna un booleano en referencia a la validación
    '''
    if numero.isnumeric():
        if len(numero) == 10:
            return True
    return False

def dar_alta_cliente():
    '''
    Contrato: debera pedir los datos del cliente(nombre,apellido,DNI,e-mail,numero de telefono)
    y validar que tengan un formato correcto.
    Pre: 
    Post: retorna un string que contendra los datos del cliente separados por un guion medio.
    '''
    while True:
        nombre = input("Ingrese el nombre del cliente ")
        nombre = nombre.strip()
        if validar_nombre(nombre):
            break
    while True:
        apellido = input("Ingrese el apellido del cliente ")
        apellido = apellido.strip()
        if validar_nombre(apellido):
            break
    while True:
        dni = input("Ingrese el dni del cliente ")
        dni = dni.strip()
        if validar_dni(dni):
            break
    while True:
        mail = input("Ingrese el mail del cliente ")
        mail = mail.strip()  
        if validar_mail(mail):
            break
    while True:
        numero = input("Ingrese el N° de telefono ")
        numero = numero.strip()
        if validar_num_telefono(numero):
            break

    return f"{nombre}-{apellido}-{dni}-{mail}-{numero}"

def modificarLinea(archivo,buscar,reemplazar):
    '''
    Contrato: modifica una línea en un archivo.
    Pre: Argumentos
            archivo: string 
            buscar: string 
            remplazar: string
    Post:
    '''
    try:
        with open(archivo, "r") as f:
            lineas = (linea.rstrip() for linea in f)
            cambiar_linea = [reemplazar if linea==buscar else linea for linea in lineas]
    except OSError:
        print("Se produjo un error relacionado con el sistema operativo")
    except FileNotFoundError:
        print("El archivo solicitado no existe ")
    except PermissionError:
        print("No cuenta con los permisos suficiente para manejar el archivo ")
    except:
        print("Ocurrio un error inesperado porfavor contactar al desarrollador")  
    try:
        with open(archivo, "w") as f:
            f.write('\n'.join(cambiar_linea) + '\n')
    except OSError:
        print("Se produjo un error relacionado con el sistema operativo")
    except FileNotFoundError:
        print("El archivo solicitado no existe ")
    except PermissionError:
        print("No cuenta con los permisos suficiente para manejar el archivo ")
    except:
        print("Ocurrio un error inesperado porfavor contactar al desarrollador")  

def hacer_reserva():
    '''
    Contrato: debe pedir que se ingresen fechas para la reserva y luego validar esas fechas,
    debe mostrar las habitaciones disponibles y dar la opcion de ver el tipo de esa habitacion,
    debe pedir los datos de cliente y crear un archivo "reserva.txt" con los datos de la reserva,
    debe modificar el archivo "estado_habitaciones" con el mes correspondiente a la reserva 
    para que muestre que la habitacion esta reservada en esa fecha. 
    Pre: Argumentos
            archivo: string 
            buscar: string 
            remplazar: string
    Post:
    '''
    hab_disp = []
    fecha_actual = datetime.now()
    anio_actual =  fecha_actual.year
    while True:
        try:
            entrada = input("Ingrese la fecha de Check-in separado con [/] ")
            salida = input("Ingrese la fecha de Check-out separado con [/] ")
            entrada = entrada.split("/")
            dia_e,mes_e,anio_e = entrada
            salida = salida.split("/")
            dia_s,mes_s,anio_s = salida
            if mes_e != mes_s:
                raise noLlegamosAIntroducirEsaFuncion
            if anio_actual > int(anio_e) or anio_actual > int(anio_s):
                raise anioIngresadoMenorAlAnioActual
        
            fecha1 = datetime(int(anio_e), int(mes_e), int(dia_e))
            fecha2 = datetime(int(anio_s), int(mes_s), int(dia_s))
            if fecha1 > fecha2:
                raise fechaEntradaMayorFechasalida
            if fecha1<(fecha_actual-timedelta(days=1,hours=12)):
              raise FechaMenorActual
        except FechaMenorActual:
            print('Error - No se puede reservar en una fecha anterior')
        except anioIngresadoMenorAlAnioActual:
            print("Error - Ingrese un año valido")
        except fechaEntradaMayorFechasalida:
            print("Error - La fecha de CheckIn debe ser menor a la fecha de CheckOut")
        except noLlegamosAIntroducirEsaFuncion:
            print("Error - Las reservas deben realizarse en un mismo mes")
        except ValueError:
            print("Error - Ingrese de nuevo la fecha")
            print("Ej: 21/7/2022")
        else:
            break
    entrada = "/".join(entrada)
    salida = "/".join(salida)   
    try:
        with open(f'{ruta_actual}/{nombre_dir}/habitaciones_estado {mes[int(mes_e)-1]}.txt',"rt", encoding='utf-8') as r1:
            for linea in r1:
                numero = linea.rstrip().split(",")[0]
                dias = linea.rstrip().split(",")[1].split("-")
                disponible = True
                for x in range(int(dia_e)-1,int(dia_s)):
                    if dias[x] == "X":
                        disponible = False
                        break
                if disponible:
                    print(f"{numero}: Esta disponible en esa fecha")
                    hab_disp.append(numero)
            if not hab_disp:
                print("No hay habitaciones disponibles en esa fecha")
                return
    except OSError:
        print("Se produjo un error relacionado con el sistema operativo")
    except FileNotFoundError:
        print("El archivo solicitado no existe ")
    except PermissionError:
        print("No cuenta con los permisos suficiente para manejar el archivo ")
    except:
        print("Ocurrio un error inesperado porfavor contactar al desarrollador")  

    if hab_disp:
        while True:
            print("Las siguientes habitaciones se encuentran disponibles")
            for x in hab_disp:
                texto ="|{:^1}|"
                print(texto.format(x),end="")
            opcion = input("Presione [S] para ver los tipos de habitaciones\nPresione cualquier tecla para continuar")
            if opcion.lower() == "s":
                tipo = []
                try:
                    with open("habitaciones.txt","rt",encoding="utf-8") as h:
                        for linea in h:
                            for x in hab_disp:
                                if linea.startswith(x):
                                    tipo.append(linea.rstrip())
                    print("Los siguientes tipos de habitaciones se encuentran disponibles: ")
                    for x in tipo:
                        algo = x.split(",")[0]
                        otro = x.split(",")[1]
                        texto = "|{:^1} {:^1}|"
                        print(texto.format(algo,otro),end="")
                except OSError:
                    print("Se produjo un error relacionado con el sistema operativo")
                except FileNotFoundError:
                    print("El archivo solicitado no existe ")
                except PermissionError:
                    print("No cuenta con los permisos suficiente para manejar el archivo ")
                except:
                    print("Ocurrio un error inesperado porfavor contactar al desarrollador")  
                break
            else:
                break
    while True:
        num_habitacion = input("Ingrese el numero de habitacion ")
        if num_habitacion.isnumeric() and num_habitacion in hab_disp:
            break
    cliente = dar_alta_cliente()
    while True:
        tarifa = input("Ingrese el monto por noche ")
        if tarifa.isnumeric() and int(tarifa)>0:
            break
    while True:
        opcion = input("Si desea ingresar un cargo ingrese [S] ")
        if opcion.lower() == "s":
            while True:
                cargo = input("Ingrese el cargo ")
                if cargo.isnumeric() and int(cargo)>0:
                    break
            break
        else:
            cargo = "0"
            break
    try:
        with open(f"{ruta_actual}/{nombre_dir}/habitaciones_estado {mes[int(mes_e)-1]}.txt","rt") as r1:
            for linea in r1:
                dias = linea.rstrip().split(",")[1].split("-")
                if linea.startswith(num_habitacion):
                    for x in range(int(dia_e)-1,int(dia_s)):
                        dias[x] = "X"
                    viejo = linea.rstrip()
                    nuevo = viejo.replace(linea.rstrip().split(",")[1],"-".join(dias))
    except OSError:
        print("Se produjo un error relacionado con el sistema operativo")
    except FileNotFoundError:
        print("El archivo solicitado no existe ")
    except PermissionError:
        print("No cuenta con los permisos suficiente para manejar el archivo ")
    except:
        print("Ocurrio un error inesperado porfavor contactar al desarrollador")  
    
    # imprime los datos cargados de la reserva como comprobante
    print()
    print("-Datos de la reserva cargados-")
    decir = [["N° habitacion: "],["Fecha de entrada: "],["Fecha de salida: "],["Nombre: ","Apellido: ","N° documento: ","Email: ","N° de telefono: "],["Precio por noche: "],["Agregados: "],["estado: "]]
    reserva = f"{num_habitacion},{entrada},{salida},{cliente},{tarifa},{cargo},Activa\n"
    relista = list(reserva.split(","))
    relista01 = []
    for x in range(len(relista)):
        relista01.append(relista[x].split("-"))
    for ax in range(len(relista01)):
        for axa in range(len(relista01[ax])):
            print(f"|{decir[ax][axa]}",relista01[ax][axa])
            print("*"*30)
    #-----------------------------------------------
    
    decision = input("Ingrese [N] si desea salir\nPresione cualquier tecla para continuar")
    if decision.lower() == "n":
        return     
    modificarLinea(f"{ruta_actual}/{nombre_dir}/habitaciones_estado {mes[int(mes_e)-1]}.txt",viejo,nuevo)
    if fecha1 == fecha_actual-timedelta(days=1,hours=12):
        reserva = f"{num_habitacion},{entrada},{salida},{cliente},{tarifa},{cargo},Activa\n"
    else: 
        reserva = f"{num_habitacion},{entrada},{salida},{cliente},{tarifa},{cargo},Pendiente\n"
    try:
        with open(f"{ruta_actual}/reserva.txt","at",encoding="utf-8")as r:
            r.write(reserva)
    except OSError:
        print("Se produjo un error relacionado con el sistema operativo")
    except FileNotFoundError:
        print("El archivo solicitado no existe 'reserva.txt'")
    except PermissionError:
        print("No cuenta con los permisos suficiente para manejar el archivo 'reserva.txt'")
    except:
        print("Ocurrio un error inesperado porfavor contactar al desarrollador")  

def diferencia_dias(entrada,salida):
    '''
    Contrato: calcula la diferencia de dias entre la entrada y la salida.
    Pre: Argumentos
            entrada: string 
            salida: string 
    Post: retorna un entero con la diferencia de dias entre la entrada y la salida.
    '''
    salida = salida.split("/")
    dia_s,mes_s,anio_s = salida
    checkOut = datetime(int(anio_s), int(mes_s), int(dia_s))
    entrada = entrada.split("/")
    dia_e,mes_e,anio_e = entrada
    checkIn = datetime(int(anio_e), int(mes_e), int(dia_e))
    diferencia = checkOut - checkIn
    if str(diferencia).split(" ")[0] == "0:00:00":
        return 1
    else:
        return int(str(diferencia).split(" ")[0])


def habitaciones_activas():
    '''
    Contrato: arma dos lista una contendra los datos de las habitaciones activas 
    y la otra contendra los numeros de habitacion de las habitaciones activas.
    Pre: Argumentos
            entrada: string 
            salida: string 
    Post: retorna una tupla que contiene una lista con las datos de las habitaciones activas 
    y otra lista con los numeros de habitacion de las habitaciones activas.
    '''
    hab_activas_num = []
    hab_activas = []
    try:
        with open(f"{ruta_actual}/reserva.txt","r+",encoding="utf-8") as algo:
            for linea in algo:
                if linea.rstrip().endswith("Activa"):
                    hab_activas_num.append(linea.rstrip().split(",")[0])
                    hab_activas.append(linea.rstrip())
    except OSError:
        print("Se produjo un error relacionado con el sistema operativo")
    except FileNotFoundError:
        print("El archivo solicitado no existe ")
    except PermissionError:
        print("No cuenta con los permisos suficiente para manejar el archivo ")
    except:
        print("Ocurrio un error inesperado porfavor contactar al desarrollador") 
    return hab_activas,hab_activas_num
def añadir_cargos():
    '''
    Contrato: suma cargos al archivo "reservas.txt".
    Pre:
    Post:
    '''
    if hab_activas:
        hab_activas,hab_activas_num = habitaciones_activas()
        while True:
            print(hab_activas_num)
            hab = input("Ingrese el numero de habitacion a la cual quiere añadir cargos ")
            if hab.isdigit() and hab in hab_activas_num:
                break
        while True:
            cargo = input("Ingrese el monto que desea cargar ")
            if cargo.isdigit() and int(cargo) >0:
                break
        for x in hab_activas:
            if x.startswith(hab):
                elegida = x
        vieja = elegida
        cargo_actual = elegida.split(",")[-2]
        nueva = elegida.split(",")
        nueva[-2] = str(int(cargo_actual) + int(cargo))
        nueva = ",".join(nueva)
        modificarLinea(f"{ruta_actual}/reserva.txt",vieja,nueva)
    else:
        print("No hay habitaciones activas")
def cambiar_estado(numero,estado):
    '''
    Contrato: cambia el estado de la habitacion reservada.
    Pre: Argumentos
        numero:string
        estado:string
    Post:
    '''
    try:
        with open(f"{ruta_actual}/reserva.txt","rt",encoding="utf-8") as re:
            for linea in re:
                if linea.startswith(numero):
                    elegida = linea.rstrip()
    except OSError:
        print("Se produjo un error relacionado con el sistema operativo")
    except FileNotFoundError:
        print("El archivo solicitado no existe ")
    except PermissionError:
        print("No cuenta con los permisos suficiente para manejar el archivo ")
    except:
        print("Ocurrio un error inesperado porfavor contactar al desarrollador") 

    vieja = elegida
    nueva = elegida.split(",")
    nueva[-1] = estado
    nueva = ",".join(nueva)
    modificarLinea(f"{ruta_actual}/reserva.txt",vieja,nueva)
    

def calcular_total():
    '''
    Contrato: calcula el monto total a cobrar por la habitacion(tarifa*noches+cargos)
    y da de baja la reserva.
    Pre:
    Post:
    '''
    fecha_actual = datetime.now()
    hab_activas,hab_activas_num = habitaciones_activas()
    if not hab_activas:
        print("No hay reservas activas")
        return
    while True:
        print(hab_activas_num)
        numero = input("Ingrese el numero de habitacion ")
        if numero in hab_activas_num:
            break
    while True:
        print("Si desea cobrar hasta la fecha de hoy presione [1]")
        print("Si desea cobrar todas las noches reservadas presion [2]")
        opcion = input("Ingrese la opcion ")
        if opcion == "1" or opcion == "2":
            print(f"Opcion {opcion} seleccionada")
            break
    try:
        with open(f"{ruta_actual}/reserva.txt","rt",encoding="utf-8") as re:
            for linea in re:
                if linea.startswith(numero):
                    entrada = linea.split(",")[1]
                    salida = linea.split(",")[2]
                    tarifa = linea.split(",")[-3]
                    cargo = linea.split(",")[-2]
    except OSError:
        print("Se produjo un error relacionado con el sistema operativo")
    except FileNotFoundError:
        print("El archivo solicitado no existe ")
    except PermissionError:
        print("No cuenta con los permisos suficiente para manejar el archivo ")
    except:
        print("Ocurrio un error inesperado porfavor contactar al desarrollador") 

    if opcion == "1":
        fecha_actual = str(fecha_actual).split(" ")[0].split("-")
        anio_a,mes_a,dia_a = fecha_actual
        actual = dia_a+"/"+mes_a+"/"+anio_a
        dia_e,mes_e,dia_e = entrada.split("/")
        diff = diferencia_dias(entrada,actual)
        total = (int(tarifa) * diff) + int(cargo)
        dia_s,mes_s,anio_s = salida.split("/")

        print(f"El total a cobrar es de {total} pesos por {diff} noches + {cargo} pesos en cargos")
        try:
            with open(f"{ruta_actual}/{nombre_dir}/habitaciones_estado {mes[int(mes_e)-1]}.txt","rt") as r2:
                for linea in r2:
                    if linea.startswith(numero):
                        viejo = linea.rstrip()
                        dias = linea.rstrip().split(",")[1].split("-")
                        for x in range(int(dia_a)-1,int(dia_s)):
                            dias[x] = "D"
  
                nuevo = viejo.replace(viejo.split(",")[1],"-".join(dias))
            modificarLinea(f"{ruta_actual}/{nombre_dir}/habitaciones_estado {mes[int(mes_e)-1]}.txt",viejo,nuevo)
        except OSError:
            print("Se produjo un error relacionado con el sistema operativo")
        except FileNotFoundError:
            print("El archivo solicitado no existe ")
        except PermissionError:
            print("No cuenta con los permisos suficiente para manejar el archivo ")
        except:
            print("Ocurrio un error inesperado porfavor contactar al desarrollador")
    elif opcion == "2":
        diff = diferencia_dias(entrada,salida)
        total = (int(tarifa) * diff) + int(cargo)
        print(f"El total a cobrar es de {total} pesos por {diff} noches + {cargo} pesos en cargos")

    cambiar_estado(numero,"Inactiva")    

def reservas_finalizadas():
    '''
    Contrato: muestra las reservas con el estado "Inactiva".
    Pre:
    Post:
    '''
    try:
        with open(f"{ruta_actual}/reserva.txt","rt",encoding="utf-8") as re:
            for linea in re:
                if linea.rstrip().endswith("Inactiva"):
                    print(linea.rstrip())
    except OSError:
        print("Se produjo un error relacionado con el sistema operativo")
    except FileNotFoundError:
        print("El archivo solicitado no existe ")
    except PermissionError:
        print("No cuenta con los permisos suficiente para manejar el archivo ")
    except:
        print("Ocurrio un error inesperado porfavor contactar al desarrollador")

def dar_alta_pendientes():
    '''
    Contrato: Muestra las reservas pendientes y da la opcion al usuario de eligir que reserva dar de alta.
    Pre:
    Post:
    '''
    l_pendiente = []
    mostrar_pendiente = []
    with open(f"{ruta_actual}/reserva.txt","rt",encoding="utf-8") as r3:
        for linea in r3:
            if linea.rstrip().endswith("Pendiente"):
                l_pendiente.append(linea.rstrip())
                numero = linea.rstrip().split(",")[0]
                fecha1 = linea.rstrip().split(",")[1]
                fecha2 = linea.rstrip().split(",")[2]
                cadena = numero+","+fecha1+","+fecha2
                mostrar_pendiente.append(cadena)
    if l_pendiente:
        for i,v in enumerate(mostrar_pendiente):
            print(i+1,v)
        while True:
            elegir = input("Seleccione el numero de la reserva que desea dar de alta ")
            if elegir.isdigit() and int(elegir) in range(len(l_pendiente)+1):
                break
        viejo = l_pendiente[int(elegir)-1]
        nuevo = viejo.split(",")
        nuevo[-1] = "Activa"
        nuevo = ",".join(nuevo)
        modificarLinea(f"{ruta_actual}/reserva.txt",viejo,nuevo)
    else:
        print("No hay reservas pendientes")

def imprimir_mes(meses):
    '''
    Contrato: muestra el estado de las habitaciones en el mes pasado por argumento.
    Pre: Argumento
        meses: list
    Post:
    '''
    while True:
        mes01 = input("Ingrese mes como numero ")
        if mes01 in [str(x) for x in range(13)]:
            mes01 = int(mes01)
            mes01-=1
            break
    
    listames = []
    try:
        with open(f"/{ruta_actual}/{nombre_dir}/habitaciones_estado {meses[mes01]}.txt","rt",encoding="utf-8") as H:
            for linea in H:
                linea = linea.split(",")
                listames.append(linea)
                
            for l in range(len(listames)):
                listames[l][1] = listames[l][1].split("-")
            lar = len(listames[0][1])
    except OSError:
        print("Se produjo un error relacionado con el sistema operativo")
    except FileNotFoundError:
        print("El archivo solicitado no existe ")
    except PermissionError:
        print("No cuenta con los permisos suficiente para manejar el archivo ")
    except:
        print("Ocurrio un error inesperado porfavor contactar al desarrollador")
    dias = ''.join([f'{x:2} |' for x in range(1, lar+1)])
    m = "Dias |" +dias
    fe = f"Mes - {meses[mes01]}"
    print("{:<30}||{:^50}||{:>30}".format(" ", fe , " "))
    caracteres = len(m)
    print('-'*caracteres)
    print(m)
    print('-'*caracteres)


    for a in range(len(listames)):
        print(f"{listames[a][0]} ",''.join( [f'| {x:2}' for x in listames[a][1]] ))
        print('-'*len(m))
    return

def opciones():
    '''
    Contrato: muestra por pantalla un conjunto de opciones
    que corresponden con las acciones del menú.
    Pre:
    Post:
    '''
    print("- Elija una opcion mencionada -:")
    print("\t1) Mostrar mes con estado de habitaciones")
    print("\t2) Mostrar reservas activas")
    print("\t3) Agregar habitaciones al hotel ")
    print("\t4) Reservar habitacion")
    print("\t5) Cargar cargos a una habitacion")
    print("\t6) Cerrar habitacion")
    print("\t7) Dar de alta [Reserva]")
    print("\t8) Ver reservar finalizadas")
    print("\t9) Salir del menu")

def menu():
    '''
    Contrato: ejecuta las funciones listadas en las opciones.
    Pre:
    Post:
    '''
    while True:
        opciones()
        while True:
            opcion = input("Elija una opcion ")
            if opcion in [str(x) for x in range(10)]:
                break
        if opcion == "1":
            if os.path.isdir(f"{ruta_actual}/{nombre_dir}"):
                if os.listdir(f"{ruta_actual}/{nombre_dir}"):
                    imprimir_mes(mes)
                else:
                    print(f"Error - No se encontraron archivos dentro de la carpeta {nombre_dir}")           
            else:
                print(f"Error - No se encontro la carpeta {nombre_dir}")
        elif opcion == "2":
            if os.path.isfile(f"{ruta_actual}/reserva.txt"):
                    activas,_ = habitaciones_activas()
                    if not activas:
                        print("No hay habitaciones activas")
                    else:
                        for x in activas:
                            print(x.split(","))
            else:
                print(f"Error- No se encontro el archivo 'reservas.txt'")
        elif opcion == "3":
            añadir_habitacion()
            armar_todo()
        elif opcion == "4":
            if os.path.isdir(f"{ruta_actual}/{nombre_dir}"):
                if os.listdir(f"{ruta_actual}/{nombre_dir}"):
                    imprimir_mes(mes)
                    while True:
                        decision = input("Ingrese [S] para continuar\nPresione cualquier tecla para salir")
                        if decision.lower() == "s":
                            hacer_reserva()
                            break
                        else:
                            break
                else:
                    print(f"Error - No se encontraron archivos dentro de la carpeta {nombre_dir}")           
            else:
                print(f"Error - No se encontro la carpeta {nombre_dir}")
        elif opcion == "5":
            if os.path.isfile(f"{ruta_actual}/reserva.txt"):
                añadir_cargos()
            else:
                print(f"Error- No se encontro el archivo 'reservas.txt'")
        elif opcion == "6":
            if os.path.isfile(f"{ruta_actual}/reserva.txt"):
                calcular_total()
            else:
                print(f"Error- No se encontro el archivo 'reservas.txt'")
        elif opcion == "7":
            if os.path.isfile(f"{ruta_actual}/reserva.txt"):
                dar_alta_pendientes()
            else:
                print(f"Error- No se encontro el archivo 'reservas.txt'")
        elif opcion == "8":
            if os.path.isfile(f"{ruta_actual}/reserva.txt"):
                reservas_finalizadas()
            else:
                print(f"Error- No se encontro el archivo 'reservas.txt'")
        elif opcion == "9":
            print("Saliendo del menu...")
            print("Adios!")
            break

#Variables globales
fecha_actual = datetime.now()
anio_actual = fecha_actual.year
nombre_dir = str(anio_actual)
ruta_actual = os.getcwd()
mes = ["01_Enero","02_Febrero","03_Marzo","04_Abril","05_Mayo","06_Junio","07_Julio","08_Agosto","09_Septiembre","10_Octubre","11_Noviembre","12_Diciembre"]

menu()